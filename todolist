[Monalect To-Do List]

+ Go from Core to ORM Queries, and create CRUD operations
	+ course
	+ goal
	+ lesson
	+ textbook
	+ textbook_section
	+ user 
- Finish website initialization queries
	- /home (GET, returns true if user is logged in so the frontend can display on homepage)
	- /monalect/
	- /monalect/overview
	- /monalect/notebook
	- /monalect/textbook
	- /monalect/questions
	- /monalect/test
- Finish testing initialization queries
	- /home (GET, returns true if user is logged in so the frontend can display on homepage)
	- /monalect/
	- /monalect/overview
	- /monalect/notebook
	- /monalect/textbook
	- /monalect/questions
	- /monalect/test

[AFTERTHOUGHTS AND PROCRASTINATIONS]

- return type of error, for example if there is an issue with finding something in the database, return a 404, and make it known to the user what went wrong (no direct display of error code, that's a XSS danger)
- create consistent variable names (verify vs validate) for example
+ ensure only one session at a time
- turn all the table names in psql into singulars instead of plurals
- comb through code for any bad words i put
- optimize multiple SQL statements so that they don't connect and close every single statement
- make calculations the responsibiliy of the client app, letting backend be purely a vessel for retrieving information (for example, making goals calculated on the client side)
- save states in the client-side so when they open the app, the javascript can directly access the local data storage, and then call backend asynchronously to validate
- convert CORS and API calls to subdomain system (api.monalect.com)
x password confirmation [DISCARDED - use show password instead]
- password validation (8 characters, 1 uppercase, 1 number) on frontend
- convert innerHTML to createElement
- asynchronous editing/saving
- use document fragment where you can
- replace className with classList
- make hide and show based on classes instead of individuals elements
- make async progress bar for upload, so user can see progress in learning material
- fix up the error codes to make sense
- allow password fields to be visible with toggle
- use Open Textbook Library's API to fill in meta-data for textbooks
- use ISBNs + Course for identification of material, with isbns constrained by being unique to certian courses
- remove server type for security purposes (don't include 'made with jinja2' as well in the meta headers)
- allow user to get goals automatically generated client-side
- pdf sanitation

